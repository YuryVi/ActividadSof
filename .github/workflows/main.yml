name: Analisis de SonarQube

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    name: Analisis de SonarQube
    runs-on: ubuntu-latest

    services:
      sonarqube:
        image: sonarqube:latest
        ports:
          - 9000:9000
        options: >-
          --health-cmd="curl -f http://localhost:9000 || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v3

      - name: Configurar Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache de SonarQube
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Esperar a que SonarQube esté listo
        run: |
          for i in {1..10}; do
            if curl -s http://localhost:9000/api/system/health | grep -q '"status":"UP"'; then
              echo "SonarQube está listo";
              break;
            fi
            echo "Esperando a que SonarQube esté listo... $i";
            sleep 10;
          done

      - name: Ejecutar análisis SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global dotnet-sonarscanner
          export PATH="$PATH:/home/runner/.dotnet/tools"
          dotnet sonarscanner begin /k:"ActividadSof" /d:sonar.login="$SONAR_TOKEN" /d:sonar.host.url="http://localhost:9000"
          dotnet build
          dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"
